"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.exportComponentInEntryPoint = void 0;
const devkit_1 = require("@nrwl/devkit");
const entry_point_1 = require("./entry-point");
const module_1 = require("./module");
const path_1 = require("./path");
function exportComponentInEntryPoint(tree, schema) {
    var _a, _b;
    if (!schema.export || (schema.skipImport && !schema.standalone)) {
        return;
    }
    const project = (_a = schema.project) !== null && _a !== void 0 ? _a : (0, devkit_1.readWorkspaceConfiguration)(tree).defaultProject;
    const { root, sourceRoot, projectType } = (0, devkit_1.readProjectConfiguration)(tree, project);
    if (projectType === 'application') {
        return;
    }
    const componentNames = (0, devkit_1.names)(schema.name);
    const componentFileName = `${componentNames.fileName}.${schema.type ? (0, devkit_1.names)(schema.type).fileName : 'component'}`;
    const projectSourceRoot = sourceRoot !== null && sourceRoot !== void 0 ? sourceRoot : (0, devkit_1.joinPathFragments)(root, 'src');
    (_b = schema.path) !== null && _b !== void 0 ? _b : (schema.path = (0, devkit_1.joinPathFragments)(projectSourceRoot, 'lib'));
    const componentDirectory = schema.flat
        ? (0, devkit_1.normalizePath)(schema.path)
        : (0, devkit_1.joinPathFragments)(schema.path, componentNames.fileName);
    const componentFilePath = (0, devkit_1.joinPathFragments)(componentDirectory, `${componentFileName}.ts`);
    const entryPointPath = (0, entry_point_1.locateLibraryEntryPointFromDirectory)(tree, componentDirectory, root, projectSourceRoot);
    if (!entryPointPath) {
        devkit_1.logger.warn(`Unable to determine whether the component should be exported in the library entry point file. ` +
            `The library's entry point file could not be found. Skipping exporting the component in the entry point file.`);
        return;
    }
    if (!schema.standalone) {
        const modulePath = (0, module_1.findModuleFromOptions)(tree, schema, root);
        if (!(0, entry_point_1.shouldExportInEntryPoint)(tree, entryPointPath, modulePath)) {
            return;
        }
    }
    const relativePathFromEntryPoint = (0, path_1.getRelativeImportToFile)(entryPointPath, componentFilePath);
    const updateEntryPointContent = (0, devkit_1.stripIndents) `${tree.read(entryPointPath, 'utf-8')}
    export * from "${relativePathFromEntryPoint}";`;
    tree.write(entryPointPath, updateEntryPointContent);
}
exports.exportComponentInEntryPoint = exportComponentInEntryPoint;
//# sourceMappingURL=component.js.map