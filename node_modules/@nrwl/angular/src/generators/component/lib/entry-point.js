"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldExportInEntryPoint = exports.locateLibraryEntryPointFromDirectory = void 0;
const devkit_1 = require("@nrwl/devkit");
const tsquery_1 = require("@phenomnomnominal/tsquery");
const path_1 = require("path");
const path_2 = require("./path");
function locateLibraryEntryPointFromDirectory(tree, directory, projectRoot, projectSourceRoot) {
    var _a;
    const ngPackageJsonPath = (0, devkit_1.joinPathFragments)(directory, 'ng-package.json');
    let entryPointFile = tree.exists(ngPackageJsonPath)
        ? (_a = (0, devkit_1.readJson)(tree, ngPackageJsonPath).lib) === null || _a === void 0 ? void 0 : _a.entryFile
        : null;
    if (entryPointFile) {
        return (0, devkit_1.joinPathFragments)(directory, entryPointFile);
    }
    if (directory === projectRoot) {
        const indexFile = (0, devkit_1.joinPathFragments)(projectSourceRoot, 'index.ts');
        return tree.exists(indexFile) ? indexFile : null;
    }
    return locateLibraryEntryPointFromDirectory(tree, (0, path_1.dirname)(directory), projectRoot, projectSourceRoot);
}
exports.locateLibraryEntryPointFromDirectory = locateLibraryEntryPointFromDirectory;
function shouldExportInEntryPoint(tree, entryPoint, modulePath) {
    if (!modulePath) {
        return false;
    }
    const moduleImportPath = (0, path_2.getRelativeImportToFile)(entryPoint, modulePath);
    const entryPointContent = tree.read(entryPoint, 'utf-8');
    const entryPointAst = tsquery_1.tsquery.ast(entryPointContent);
    const moduleExport = (0, tsquery_1.tsquery)(entryPointAst, `ExportDeclaration StringLiteral[value='${moduleImportPath}']`, { visitAllChildren: true })[0];
    return Boolean(moduleExport);
}
exports.shouldExportInEntryPoint = shouldExportInEntryPoint;
//# sourceMappingURL=entry-point.js.map